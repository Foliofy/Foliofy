{"ast":null,"code":"import { forEach } from 'property-expr';\nimport has from \"lodash-es/has\";\n\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\n\nexport function getIn(schema, path, value, context) {\n  var parent, lastPart, lastPartDebug; // if only one \"value\" arg then use it for both\n\n  context = context || value;\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n\n    if (isArray || has(schema, '_subType')) {\n      // we skipped an array: foo[].bar\n      var idx = isArray ? parseInt(part, 10) : 0;\n      schema = schema.resolve({\n        context: context,\n        parent: parent,\n        value: value\n      })._subType;\n\n      if (value) {\n        if (isArray && idx >= value.length) {\n          throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n        }\n\n        value = value[idx];\n      }\n    }\n\n    if (!isArray) {\n      schema = schema.resolve({\n        context: context,\n        parent: parent,\n        value: value\n      });\n      if (!has(schema, 'fields') || !has(schema.fields, part)) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\") \"));\n      schema = schema.fields[part];\n      parent = value;\n      value = value && value[part];\n      lastPart = part;\n      lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n    }\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\n\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\n\nexport default reach;","map":{"version":3,"sources":["/Users/apple/Desktop/FoliofyOrg/node_modules/yup/es/util/reach.js"],"names":["forEach","has","trim","part","substr","length","getIn","schema","path","value","context","parent","lastPart","lastPartDebug","parentPath","_part","isBracket","isArray","idx","parseInt","resolve","_subType","Error","fields","_type","reach","obj"],"mappings":"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","sourcesContent":["import { forEach } from 'property-expr';\nimport has from \"lodash-es/has\";\n\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\n\nexport function getIn(schema, path, value, context) {\n  var parent, lastPart, lastPartDebug; // if only one \"value\" arg then use it for both\n\n  context = context || value;\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n\n    if (isArray || has(schema, '_subType')) {\n      // we skipped an array: foo[].bar\n      var idx = isArray ? parseInt(part, 10) : 0;\n      schema = schema.resolve({\n        context: context,\n        parent: parent,\n        value: value\n      })._subType;\n\n      if (value) {\n        if (isArray && idx >= value.length) {\n          throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n        }\n\n        value = value[idx];\n      }\n    }\n\n    if (!isArray) {\n      schema = schema.resolve({\n        context: context,\n        parent: parent,\n        value: value\n      });\n      if (!has(schema, 'fields') || !has(schema.fields, part)) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\") \"));\n      schema = schema.fields[part];\n      parent = value;\n      value = value && value[part];\n      lastPart = part;\n      lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n    }\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\n\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\n\nexport default reach;"]},"metadata":{},"sourceType":"module"}